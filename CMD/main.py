
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import time
from os import kill
import re
import sys
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
import subprocess
from tkinter import * 
from tkinter.ttk import *
from tkinter import Label, StringVar, Tk, Canvas, Entry, Text, Button, PhotoImage
from tkinter import filedialog as fd
import tkinter as tk
from tkinter import ttk
#import externalRenderer



OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()
imagesSaved = 0
window.geometry("643x360")
window.wm_title("Blender Auto Render")
window.iconbitmap("H:/RenderTest/Testing/build/assets/Blender Icon.ico")
window.configure(bg = "#2E2E2E")
filenameX = ""
outputFolder = ""
#-----------------------------------------------------------------------------------------------------------------------------------------------

def recallBlenderProgram(state, rendererPath):
    if state == "update":
        barSETTINGS = open("bar.settings","a")
        barSETTINGS.write(rendererPath)
        barSETTINGS.close()
    if state == "read":
        barSETTINGS = open("bar.settings","r")
        print(barSETTINGS.read())
        settings = barSETTINGS.read()
        barSETTINGS.close()
        return settings      

def resetANDclear():
    entry_1.delete(0, END)
    entry_2.delete(0, END)
    blenderfile.set("Select a .blend file:")
    progress['value'] = 0
    window.update()

def updateProgress(percentage):
    progress['value'] = percentage * 100
    window.update_idletasks()

def updateStatus(message):
    status.set(message)
    window.update()

def select_file():
    filetypes = (
        ('Blender Files', '*.blend'),
        ('All files', '*.*')
    )
    global filenameX
    filename = fd.askopenfilename(
        title='Open a file',
        initialdir='/',
        filetypes=filetypes)
    filenameX = filename
    blenderfile.set("Blender File: " + filename)
    print("Selected File: " + filename)
def select_renderer():
    filetypes = (
        ('Blender Renderer', '*.exe'),
        ('All files', '*.*')
    )
    global rendererX
    renderer = fd.askopenfilename(
        title='Open a Rendering Version',
        initialdir='/',
        filetypes=filetypes)
    rendererX = renderer
    recallBlenderProgram("update", rendererX)
    print("Selected Renderer: " + rendererX)

def log(message):
    print(message)

def selectoutput():
    global outputFolder
    filename = fd.askdirectory(
        title='Open a Folder',
        initialdir='/')
    outputFolder = filename
    
    print(outputFolder)

def updateDisplay(myString):
    status.set(myString)
    return

def checkLine(temp):
    temp = temp.decode("utf-8")
    if "Saved: '" in temp:
        
        return True
    else:
        return False


def openfolder():
    if outputFolder == "":
        tk.messagebox.showwarning(title="WARNING", message="Please select an output folder to export project too.")
    else:
        print(outputFolder)
        
        subprocess.Popen("explorer {}".format(outputFolder.replace("/", "\\")))
  
    

def renderBlender():
    status.set("")
    window.update_idletasks()
    status.set("Render Starting")
    window.update()
    
    updateDisplay("Render Starting")
    start=startframe.get()
    end=endframe.get()
    start = re.sub(r'[a-z]', '', start.lower())
    end = re.sub(r'[a-z]', '', end.lower())
    
    if outputFolder == "":
        tk.messagebox.showwarning(title="WARNING", message="Please select an output folder to export project too.")
        updateDisplay("Waiting for inputs")
        return
    if filenameX == "":
        tk.messagebox.showwarning(title="WARNING", message="Please select a blender file to render.")
        updateDisplay("Waiting for inputs")
        return
    if end == "":
        tk.messagebox.showwarning(title="WARNING", message="Please put a numerical start and end frame.")
        updateDisplay("Waiting for inputs")
        return
    if start == "":
        tk.messagebox.showwarning(title="WARNING", message="Please put a numerical start and end frame.")
        updateDisplay("Waiting for inputs")
        return
    if start > end:
        tk.messagebox.showwarning(title="WARNING", message="Start frame cannot be greater than end frame.")
        updateDisplay("Waiting for inputs")
        return
    print(start, end)
    time.sleep(2)
    status.set("Rendering")
    window.update()
    #externalRenderer.renderCommand(outputFolder, filenameX, start, end)
    print(['python3', 'externalRenderer.py', outputFolder, filenameX, start, end])
    proc = subprocess.Popen(['python3', 'externalRenderer.py', outputFolder, filenameX, start, end],stdout=subprocess.PIPE)
    imagesSaved = 0
    for line in iter(proc.stdout.readline,''):
        message = line.rstrip()
        if message == b'':
            placeholder = 0
        else:
            message = message.decode("utf-8")
            instrutions = message.split("|")
            print(instrutions)
            if instrutions[0] == "PE":
                updateProgress(float(instrutions[1]))
            if instrutions[0] == "SM":
                updateStatus(instrutions[1])



def placehold():
    print(outputFolder.replace("/", "\\") + "render_#####")
    proc = subprocess.Popen(['G:/main_gaming/steamapps/common/Blender/blender.exe','-b',filenameX,'-s',start,'-e',end, '-o', outputFolder.replace("/", "\\") + "\\render_#####", '-a'],stdout=subprocess.PIPE)
    imagesSaved = 0
    for line in iter(proc.stdout.readline,''):
        #print(line.rstrip())
        callback = checkLine(line.rstrip())
        if callback == True:
            imagesSaved += 1
            updateProgressBar(int(imagesSaved)/int(end))
            comms = "{}/{} images saved. ".format(imagesSaved, str(int(end)-(int(start)-1)))
            status.set("Rendering: {}".format(comms))
            window.update()
        #print('Saved:' in line.rstrip())
        if line.rstrip() == b'Blender quit':
            t1 = time.time()
            totalrendertime = "Total Render Time: " + str(t1-t0)
            print(t1-t0)
            
            updateDisplay("Render Finished - " + display_time(t1-t0))
            entry_1.delete(0, END)
            entry_2.delete(0, END)
            blenderfile.set("Select a .blend file:")
            progress['value'] = 0
            window.update_idletasks()
            
            return
        #if "Saved: '" in line.rstrip():
        #    imagesSaved += 1
        #    print(imagesSaved)
        #    print(end)


#-----------------------------------------------------------------------------------------------------------------------------------------------
status = StringVar()
blenderfile = StringVar()
endframe = tk.StringVar()
startframe = tk.StringVar()



canvas = Canvas(
    window,
    bg = "#2E2E2E",
    height = 321,
    width = 643,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
#canvas.create_rectangle(0.0,0.0,643.0,321.0,fill="#2E2E2E",outline="")
#-----------------------------------------------------------------------------------------------------------------------------------------------
canvas.create_text(
    154.0,
    7.0,
    anchor="nw",
    text="Blender Auto Render",
    fill="#D6D6D6",
    font=("Bebas Neue Regular", 48 * -1)
)

canvas.create_text(
    150.0,
    97.0,
    anchor="nw",
    text="Select Blender File",
    fill="#D6D6D6",
    font=("Bebas Neue Regular", 24 * -1)
)

canvas.create_text(
    150.0,
    134.0,
    anchor="nw",
    text="Frame Start",
    fill="#D6D6D6",
    font=("Bebas Neue Regular", 24 * -1)
)
#-----------------------------------------------------------------------------------------------------------------------------------------------
button_image_1 = PhotoImage(file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=select_file,
    #relief="flat"
)
button_1.place(
    x=424.0,
    y=97.0,
    width=65.0,
    height=27.0
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(456.5, 147.5, image=entry_image_1)
entry_1 = Entry(
    textvariable=startframe,
    bd=0,
    bg="#E87D3E",
)
entry_1.place(
    x=425.0,
    y=134.0,
    width=64.0,
    height=25.0
)

canvas.create_text(
    150.0,
    171.0,
    anchor="nw",
    text="Frame end",
    fill="#D6D6D6",
    font=("Bebas Neue Regular", 24 * -1)
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(456.5, 184.5, image=entry_image_2)
entry_2 = Entry(
    textvariable=endframe,
    bd=0,
    bg="#E87D3E",
    highlightthickness=0
)
entry_2.place(
    x=426.0,
    y=171.0,
    width=63.0,
    height=25.0
)

#entry_image_3 = PhotoImage(file=relative_to_assets("entry_3.png"))
#entry_bg_3 = canvas.create_image(321.5, 280.5, image=entry_image_3)


# Function responsible for the updation
# of the progress bar value


#canvas.create_text(
#    60.0,
#    265.5,
#   anchor="nw",
#    text=displayVar,
#    fill="#000000",
#    font=("Bebas Neue Regular", 24 * -1)
#)

#progressbar = tk.Label(window, textvariable = displayVar, bg="#2E2E2E", font=("Bebas Neue Regular", 14 * -1)).place(x= 60, y= 268.8)

blenderfileobj = tk.Label(window, textvariable = blenderfile, bg="#6c99bb", font=("Bebas Neue Regular", 14 * -1)).pack(anchor='center', pady=64.5)
blenderfile.set("Select a .blend file:")


#    font=("Bebas Neue Regular", 24 * -1)
#60.0,
#265.5,



progress = Progressbar(window, orient = HORIZONTAL, length = 500, mode = 'determinate')

progress.pack(anchor='center', pady= 65)


statusupdate = tk.Label(window, textvariable = status, bg="#b4d273", font=("Bebas Neue Regular", 14 * -1)).pack(anchor='center', pady=0)
status.set("Wating for Render Settings")

#progressbar = tk.Label(window, textvariable = displayVar, bg="#2E2E2E", font=("Bebas Neue Regular", 14 * -1)).pack(anchor='center', pady= 10)
#displayVar.set("asd")

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: renderBlender()
    #relief="flat"
)
button_2.place(
    x=261.0,
    y=264.0,
    #y=300.0,
    width=122.0,
    height=27.0
)

setoutputimage = PhotoImage(
    file=relative_to_assets("output2.png"))
setoutput = Button(
    image=setoutputimage,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: selectoutput()
    #relief="flat"
)
setoutput.place(
    x=122.0,
    y=264.0,
    #y=300.0,
    width=122.0,
    height=27.0
)

#selectrenderimage = PhotoImage(file=relative_to_assets("selectrender.png"))
#selectrender = Button(image=selectrenderimage,borderwidth=0,highlightthickness=0,command=lambda: select_renderer()#relief="flat")
#selectrender.place(x=24.0,y=23.0,#y=300.0,width=122.0,height=27.0)



openfileimage = PhotoImage(
        file=relative_to_assets("output.png"))
openfile = Button(
    image=openfileimage,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: openfolder()
    #relief="flat"
)   
openfile.place(
    x=410.0,
    y=264.0,
    #y=300.0,
    width=122.0,
    height=27.0
)

canvas.create_text(
    301.0,
    200.0,
    anchor="nw",
    text="STATUS",
    fill="#D6D6D6",
    font=("Bebas Neue Regular", 14 * -1)
)
window.resizable(False, False)
window.mainloop()
